{"version":3,"sources":["Apartment.js","Apartments.js","ApartmentsList.js","SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Apartment","props","id","title","imageSrc","price","rating","isAvailable","favorites","fillColor","react_default","a","createElement","role","aria-label","src","alt","style","width","height","borderRadius","fill","cx","cy","r","Array","from","length","map","star","includes","Apartments","_ref","showAll","searchValue","_useState","useState","_useState2","Object","slicedToArray","setFavorites","ApartmentData","apart","state","toLowerCase","react","src_Apartment","onClick","filter","value","concat","toConsumableArray","ApartmentsList","src_Apartments","SearchBar","setSearchValue","type","placeholder","onChange","e","target","isFalse","arg","App","setShowAll","_useState3","_useState4","isMatch","apt","isVisible","src_SearchBar","every","src_ApartmentsList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72981690.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Apartment(props) {\r\n  const { id, title, imageSrc, price, rating, isAvailable, favorites } = props;\r\n  const fillColor = isAvailable ? \"green\" : \"red\";\r\n  return (\r\n    <div>\r\n      <div>\r\n        <span role=\"img\" aria-label=\"\">\r\n          <img\r\n            src={imageSrc}\r\n            alt=\"apartment\"\r\n            style={{ width: \"50px\", height: \"50px\", borderRadius: \"50%\" }}\r\n          />\r\n        </span>\r\n      </div>\r\n      <div>\r\n        <span>\r\n          <svg width=\"10\" height=\"10\">\r\n            <circle fill={fillColor} cx=\"5\" cy=\"5\" r=\"5\" />\r\n          </svg>\r\n        </span>\r\n        {title}\r\n      </div>\r\n      <div>{price}</div>\r\n      <div>\r\n        <div>\r\n          {Array.from({ length: rating}).map(star => (\r\n            <span role=\"img\" aria-label=\"\">\r\n              ‚≠ê\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {favorites.includes(id) ? \r\n        <span role=\"img\" aria-label=\"\">\r\n        üíô\r\n      </span> : ''}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Apartment;\r\n","import React, {useState, Fragment } from \"react\";\r\nimport Apartment from \"./Apartment\";\r\nimport ApartmentData from \"./Apartments.json\";\r\n\r\nfunction Apartments({ showAll, searchValue}) {\r\n  const [favorites, setFavorites] = useState([]);\r\n  const removeId = id => (\r\n    favorites.filter(function (value) {\r\n      return value !== id;\r\n    })\r\n  );\r\n  return (\r\n    <div>\r\n      <div>\r\n        {ApartmentData.map(\r\n          apart =>\r\n            (!showAll || apart.state) &&\r\n            (apart.title.toLowerCase().includes(searchValue) ||\r\n              apart.price.toLowerCase().includes(searchValue)) && (\r\n              <Fragment>\r\n                <Apartment\r\n                  id={apart.id}\r\n                  title={apart.title}\r\n                  price={apart.price}\r\n                  rating={apart.rating}\r\n                  imageSrc={apart.imageSrc}\r\n                  isAvailable={apart.state}\r\n                  favorites={favorites}\r\n                />\r\n                <div>\r\n                  <button onClick={() => (favorites.includes(apart.id) ? setFavorites(removeId(apart.id)) : setFavorites([...favorites, apart.id]) )}>\r\n                    {favorites.includes(apart.id) ? \"Remove favorite\" : \"Set favorite\" }\r\n                  </button>\r\n                </div><br/>\r\n              </Fragment>\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Apartments;\r\n","import React from \"react\";\r\nimport Apartments from \"./Apartments\";\r\n\r\nconst title = <div>Apartment list</div>;\r\n\r\nfunction ApartmentsList({ showAll, searchValue }) {\r\n  return (\r\n    <div>\r\n      {title}\r\n      <Apartments showAll={showAll} searchValue={searchValue} />\r\n      <div />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ApartmentsList;\r\n","import React from 'react';\r\n\r\nfunction SearchBar({searchValue, setSearchValue}) {\r\n    return (\r\n        <div>\r\n          <input\r\n            type=\"search\"\r\n            value={searchValue}\r\n            placeholder=\"Search...\"\r\n            onChange={e => setSearchValue(e.target.value)}\r\n          />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;","import React, { useState } from \"react\";\nimport ApartmentsList from \"./ApartmentsList\";\nimport ApartmentData from \"./Apartments.json\";\nimport SearchBar from \"./SearchBar\";\n\nfunction isFalse(arg) {\n  return arg === false;\n}\n\nfunction App() {\n  const [showAll, setShowAll] = useState(false);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const isMatch = ApartmentData.map(\n    apt =>\n    apt.state && \n      (apt.title.toLowerCase().includes(searchValue) ||\n      apt.price.toLowerCase().includes(searchValue))\n  );\n\n  const isVisible = ApartmentData.map(\n    apt =>\n    (!showAll || apt.state) &&\n      (apt.title.toLowerCase().includes(searchValue) ||\n      apt.price.toLowerCase().includes(searchValue))\n  ).filter(a => a === true);\n\n  return (\n    <div>\n      <div>\n        <div>\n          <SearchBar\n            searchValue={searchValue}\n            setSearchValue={setSearchValue}\n          />\n          <button onClick={() => setShowAll(!showAll)}>\n            {!showAll ? \"Show only available\" : \"Show all\"}\n          </button>\n          <div>\n            {searchValue && isMatch.every(isFalse)\n              ? `The term \"${searchValue}\" returned no apartment :(`\n              : \"Found \" +\n                isVisible.length +\n                \" out of \" +\n                ApartmentData.length}\n          </div>\n        </div>\n        <ApartmentsList\n          showAll={showAll}\n          searchValue={searchValue.toLowerCase()}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}